<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="http://blogs.msdn.com/utility/FeedStylesheets/atom.xsl" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><title type="html">Windows PowerShell Blog</title><subtitle type="html">Automating the world one-liner at a time.
&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td align=right&gt;&lt;a href='http://blogs.msdn.com/powershell/pages/download-windows-powershell.aspx'&gt;&lt;u&gt;Click Here&lt;/u&gt;&lt;/a&gt; to Download PowerShell&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</subtitle><id>http://blogs.msdn.com/powershell/atom.xml</id><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/default.aspx" /><link rel="self" type="application/atom+xml" href="http://blogs.msdn.com/powershell/atom.xml" /><generator uri="http://communityserver.org" version="2.1.61025.2">Community Server</generator><updated>2009-02-06T19:36:00Z</updated><entry><title>Get-ProgID</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/20/get-progid.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/20/get-progid.aspx</id><published>2009-03-20T22:24:59Z</published><updated>2009-03-20T22:24:59Z</updated><content type="html">&lt;p&gt;The other day, a friend over in Microsoft Research wanted to figure out how to get out the width and height of an image in PowerShell.&amp;#160; There are many ways that you can approach this particular problem.&amp;#160; I knew three right off of the top of my head, but none of them had a really optimal experience.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;I could use &lt;a href="http://blogs.msdn.com/mediaandmicrocode/archive/2008/07/13/microcode-windows-powershell-windows-desktop-search-problem-solving.aspx"&gt;Windows Desktop Search&lt;/a&gt;, but then I’d have to wade through shell properties and it would not work when the images haven’t been indexed. &lt;/li&gt;    &lt;li&gt;I could use Windows Media Player (New-Object –ComObject WMPlayer.OCX), but I’d also have to wade through a lot of metadata information that’s indexed by #, so this wouldn’t be ideal. &lt;/li&gt;    &lt;li&gt;I could use the &lt;a href="http://blogs.technet.com/jamesone/archive/2008/12/09/borrowing-from-windows-explorer-in-powershell-part-2-extended-properties.aspx"&gt;Shell Properties&lt;/a&gt;, but this too would involve a lot of translating property numbers into property names. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I knew there had to be a better way.&amp;#160; Some object had to be able to give me back image width and height as a nice simple property.&lt;/p&gt;  &lt;p&gt;I normally use two functions to find my way around unfamiliar problems (before I start using search engines).&amp;#160; One I’ve shared out a few times is called &lt;a href="http://blogs.msdn.com/mediaandmicrocode/archive/2008/10/23/microcode-powershell-scripting-tricks-exploring-net-types-with-a-get-type-function-and-reflection.aspx"&gt;Get-Type&lt;/a&gt;.&amp;#160; Get-Type will search anything loaded in .NET for a potential solution.&amp;#160; The problem with Get-Type is that not every type .NET has is always loaded, and loading up these types is fairly expensive.&amp;#160; COM objects, however, are listed in the registry.&amp;#160; Since we can crawl the registry in PowerShell, it’s simple enough to go ahead and check through all of the ProgIDs.&lt;/p&gt;  &lt;p&gt;Here's my Get-ProgID function.&amp;#160; The second example is how I found some cool image manipulation objects I can use from PowerShell.&lt;/p&gt;  &lt;pre class="PowerShellColorizedScript"&gt;&lt;span style="color: #00008b"&gt;function&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;Get-ProgID&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;                       
    &lt;span style="color: #006400"&gt;#.Synopsis&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#   Gets all of the ProgIDs registered on a system&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#.Description&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#   Gets all ProgIDs registered on the system.  The ProgIDs returned can be used with New-Object -comObject&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#.Example&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#   Get-ProgID&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#.Example&lt;/span&gt;            
    &lt;span style="color: #006400"&gt;#   Get-ProgID | Where-Object { $_.ProgID -like &amp;quot;*Image*&amp;quot; } &lt;/span&gt;            
    &lt;span style="color: #00008b"&gt;param&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            
    &lt;span style="color: #ff4500"&gt;$paths&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt; &lt;span style="color: #000000"&gt;@(&lt;/span&gt;&lt;span style="color: #8b0000"&gt;&amp;quot;REGISTRY::HKEY_CLASSES_ROOT\CLSID&amp;quot;&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            
    &lt;span style="color: #00008b"&gt;if&lt;/span&gt; &lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$env:Processor_Architecture&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;-eq&lt;/span&gt; &lt;span style="color: #8b0000"&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
        &lt;span style="color: #ff4500"&gt;$paths&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;+=&lt;/span&gt;&lt;span style="color: #8b0000"&gt;&amp;quot;REGISTRY::HKEY_CLASSES_ROOT\Wow6432Node\CLSID&amp;quot;&lt;/span&gt;            
    &lt;span style="color: #000000"&gt;}&lt;/span&gt;             
    &lt;span style="color: #0000ff"&gt;Get-ChildItem&lt;/span&gt; &lt;span style="color: #ff4500"&gt;$paths&lt;/span&gt; &lt;span style="color: #000080"&gt;-include&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;VersionIndependentPROGID&lt;/span&gt; &lt;span style="color: #000080"&gt;-recurse&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;|&lt;/span&gt;            
    &lt;span style="color: #0000ff"&gt;Select-Object&lt;/span&gt; &lt;span style="color: #000000"&gt;@{&lt;/span&gt;            
        &lt;span style="color: #000000"&gt;Name&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt;&lt;span style="color: #8b0000"&gt;'ProgID'&lt;/span&gt;            
        &lt;span style="color: #000000"&gt;Expression&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt;&lt;span style="color: #000000"&gt;{&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$_&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;GetValue&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #8b0000"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;&lt;span style="color: #000000"&gt;}&lt;/span&gt;                    
    &lt;span style="color: #000000"&gt;}&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;,&lt;/span&gt; &lt;span style="color: #000000"&gt;@{&lt;/span&gt;            
        &lt;span style="color: #000000"&gt;Name&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt;&lt;span style="color: #8b0000"&gt;'32Bit'&lt;/span&gt;            
        &lt;span style="color: #000000"&gt;Expression&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt;&lt;span style="color: #000000"&gt;{&lt;/span&gt;            
            &lt;span style="color: #00008b"&gt;if&lt;/span&gt; &lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$env:Processor_Architecture&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;-eq&lt;/span&gt; &lt;span style="color: #8b0000"&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
                &lt;span style="color: #ff4500"&gt;$_&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;PSPath&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;Contains&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #8b0000"&gt;&amp;quot;Wow6432Node&amp;quot;&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;                
            &lt;span style="color: #000000"&gt;}&lt;/span&gt; &lt;span style="color: #00008b"&gt;else&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
                &lt;span style="color: #ff4500"&gt;$true&lt;/span&gt;            
            &lt;span style="color: #000000"&gt;}&lt;/span&gt;                        
        &lt;span style="color: #000000"&gt;}&lt;/span&gt;            
    &lt;span style="color: #000000"&gt;}&lt;/span&gt;            
&lt;span style="color: #000000"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Hope this Helps,&lt;/p&gt;

&lt;p&gt;James Brundage [MSFT]&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9493763" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Active Directory Powershell Blog</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/20/active-directory-powershell-blog.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/20/active-directory-powershell-blog.aspx</id><published>2009-03-20T07:16:00Z</published><updated>2009-03-20T07:16:00Z</updated><content type="html">&lt;P&gt;AD team has started a new blog for their PowerShell Cmdlets.. In their own words "We are here to answer any questions about AD Powershell, share some tips and tricks, discuss the history behind certain decisions and features and hear your feedback on improving AD Powershell experience"&lt;/P&gt;
&lt;P&gt;Check this out &lt;A href="http://blogs.msdn.com/adpowershell/" mce_href="http://blogs.msdn.com/adpowershell/"&gt;http://blogs.msdn.com/adpowershell/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Osama Sajid&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9491938" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author><category term="Active Directory" scheme="http://blogs.msdn.com/powershell/archive/tags/Active+Directory/default.aspx" /></entry><entry><title>Local Boy Makes Good</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/16/local-boy-makes-good.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/16/local-boy-makes-good.aspx</id><published>2009-03-16T16:56:01Z</published><updated>2009-03-16T16:56:01Z</updated><content type="html">&lt;p&gt;Check it out:&amp;#160; &lt;a title="http://www.microsoft.com/presspass/exec/de/snover/default.mspx" href="http://www.microsoft.com/presspass/exec/de/snover/default.mspx"&gt;http://www.microsoft.com/presspass/exec/de/snover/default.mspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;One of the biggest &lt;a href="http://www.darkharbor.com/snoopydance/"&gt;Snoopy Dance&lt;/a&gt; moments of my life!&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;BTW - this is really a reflection of how important Microsoft views PowerShell.&lt;/p&gt;  &lt;p&gt;I'd love to say more but I've got some Snoopy Dancing to do.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Experiment! Enjoy! Engage! &lt;/p&gt;  &lt;p&gt;Jeffrey Snover [MSFT]   &lt;br /&gt;Windows Management Partner Architect    &lt;br /&gt;Visit the Windows PowerShell Team blog at:&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/a&gt;    &lt;br /&gt;Visit the Windows PowerShell ScriptCenter at:&amp;#160; &lt;a href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/a&gt;&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9481692" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>dir –a:d</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/13/dir-a-d.aspx" /><link rel="enclosure" type="application/octet-stream" length="10784" href="http://blogs.msdn.com/powershell/attachment/9473506.ashx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/13/dir-a-d.aspx</id><published>2009-03-13T18:39:00Z</published><updated>2009-03-13T18:39:00Z</updated><content type="html">&lt;P&gt;In cmd, listing files based on attributes was simple:&lt;/P&gt;
&lt;TABLE class="" cellSpacing=0 cellPadding=2 width=400 border=0&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only directories&lt;/TD&gt;
&lt;TD class="" vAlign=top width=200&gt;dir /a:d&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only files (no directories)&lt;/TD&gt;
&lt;TD class="" vAlign=top width=200&gt;dir /a:-d&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only hidden files&lt;/TD&gt;
&lt;TD class="" vAlign=top width=200&gt;dir /a:h&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;In PowerShell, it’s not so easy:&lt;/P&gt;
&lt;TABLE class="" cellSpacing=0 cellPadding=2 width=571 border=0&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only directories&lt;/TD&gt;
&lt;TD class="" vAlign=top width=369&gt;dir | ? { $_.PSIsContainer }&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only files (no directories)&lt;/TD&gt;
&lt;TD class="" vAlign=top width=369&gt;dir | ? { !$_.PSIsContainer }&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class="" vAlign=top width=200&gt;only hidden files&lt;/TD&gt;
&lt;TD class="" vAlign=top width=369&gt;dir -force | ? { $_.Attributes –band [IO.FileAttributes]::Hidden } &lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;We have had requests to cover the first case better, for example:&lt;/P&gt;
&lt;P&gt;&lt;A title=https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=252549&amp;amp;wa=wsignin1.0 href="https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=252549&amp;amp;wa=wsignin1.0" mce_href="https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=252549&amp;amp;wa=wsignin1.0"&gt;https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=252549&amp;amp;wa=wsignin1.0&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&lt;A title=https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=308796&amp;amp;wa=wsignin1.0 href="https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=308796&amp;amp;wa=wsignin1.0" mce_href="https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=308796&amp;amp;wa=wsignin1.0"&gt;https://connect.microsoft.com/feedback/ViewFeedback.aspx?SiteID=99&amp;amp;FeedbackID=308796&amp;amp;wa=wsignin1.0&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;We haven’t added such a parameter to Get-ChildItem yet, but with some new features in V2, you can add them yourself.&lt;/P&gt;
&lt;P&gt;The techniques I describe below can be used to augment any cmdlet, or any script or function for that matter.&lt;/P&gt;
&lt;P&gt;If you don’t care much about the actual implementation details, just skip to the bottom and download the module.&amp;nbsp; To start using it, you can use:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #0000ff"&gt;import-module&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;path\to\Get-ChildItem.psm1&lt;/SPAN&gt;&lt;/PRE&gt;
&lt;P&gt;(Note that there isn’t any particularly good reason I implemented this as a module, other than as a way of testing multiple features.&amp;nbsp; It could work equally well as a script or function.)&lt;/P&gt;
&lt;P&gt;To get started, we need a proxy to Get-ChildItem.&amp;nbsp; It should support all of the parameters that Get-ChildItem supports, plus it should support pipelining in the same way as the cmdlet.&amp;nbsp; We can use the following code to generate a proxy:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$md&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;new-object&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;System.Management.Automation.CommandMetadata&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #0000ff"&gt;get-command&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;get-childitem&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #008080"&gt;[System.Management.Automation.ProxyCommand]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;::&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Create&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$md&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;&lt;/PRE&gt;
&lt;P&gt;This will return a rather long string, we can capture it in a file and make our changes.&lt;/P&gt;
&lt;P&gt;The first thing we need is an additional parameter.&amp;nbsp; We’ll call it Attribute.&amp;nbsp; We just add:&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="COLOR: #008080"&gt;[System.String]&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$Attribute&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;''&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;&lt;/SPAN&gt;to the param block.&lt;/P&gt;
&lt;P&gt;Next, we need to add the logic for our new parameter.&amp;nbsp; To do this, we will replace the Begin block that was generated with the following code:&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;FONT face="Courier New" size=2&gt;&lt;/FONT&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="COLOR: #008080"&gt;[void]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$PSBoundParameters&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Remove&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #8b0000"&gt;'Attribute'&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$wrappedCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$ExecutionContext&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;InvokeCommand&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;GetCommand&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #8b0000"&gt;'Get-ChildItem'&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt;&lt;SPAN style="COLOR: #008080"&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [System.Management.Automation.CommandTypes]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;::&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Cmdlet&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$Attribute&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-ne&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;''&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #800080"&gt;0&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$excludeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #800080"&gt;0&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #008080"&gt;[bool]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$onOrOff&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$true&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;foreach&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$char&lt;/SPAN&gt; &lt;SPAN style="COLOR: #00008b"&gt;in&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$Attribute&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;GetEnumerator&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$char&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-eq&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;'-'&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$onOrOff&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$false&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;else&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$flags&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;[&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$char&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;]&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-eq&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$null&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;throw&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;"Attribute '$char' not supported"&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$onOrOff&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-bor&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$flags&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;[&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$char&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;]&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;else&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$excludeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$excludeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-bor&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$flags&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;[&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$char&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;]&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$onOrOff&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$true&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-band&lt;/SPAN&gt; &lt;SPAN style="COLOR: #008080"&gt;[IO.FileAttributes]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;::&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Hidden&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$PSBoundParameters&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Force&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$true&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$scriptCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;&amp;amp;&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$wrappedCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;@PSBoundParameters&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;|&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #0000ff"&gt;?&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;PSProvider&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Name&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-ne&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;'FileSystem'&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-or&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Attributes&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-band&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-eq&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$includeMask&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-and&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Attributes&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-band&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$excludeMask&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-eq&lt;/SPAN&gt; &lt;SPAN style="COLOR: #800080"&gt;0&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #00008b"&gt;else&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;SPAN style="COLOR: #ff4500"&gt;$scriptCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;&amp;amp;&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$wrappedCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;@PSBoundParameters&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #000000"&gt;} &lt;BR&gt;&lt;/SPAN&gt;&lt;BR&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$steppablePipeline&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$scriptCmd&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;GetSteppablePipeline&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$steppablePipeline&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Begin&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$PSCmdlet&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;BR&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Note the first thing we do is remove our parameter from PSBoundParameters.&amp;nbsp; If we don’t do that, the real cmdlet Get-ChildItem will complain about the unknown parameter when it is specified.&lt;/P&gt;
&lt;P&gt;I wanted functionality and syntax as close to cmd.exe as possible.&amp;nbsp; So we should support things like ‘dir –a:h-sr’, which would include hidden read-only files that are not system files.&amp;nbsp; To do this, I generate bitmasks representing the attributes requested, then filter the output of the actual Get-ChildItem command based on these bitmasks.&lt;/P&gt;
&lt;P&gt;Note the script block assigned to $scriptCmd is similar to the one generated by ProxyCommand.Create, but it includes some filtering.&amp;nbsp; Steppable pipelines can’t be created for arbitrary script blocks, only when there is a single pipeline in the script block.&amp;nbsp; Fortunately we can do all our filtering in one pipeline.&lt;/P&gt;
&lt;P&gt;If you wanted to add sorting to the output, you could extend this pipeline to do the appropriate sorting.&amp;nbsp; I leave it as an exercise for the reader to add the cmd.exe sorting flags like /OD, /O-D, /OS, /O-S, etc.&lt;/P&gt;
&lt;P&gt;ProxyCommand.Create works pretty good, but it doesn’t generate code to support dynamic parameters.&amp;nbsp; Most cmdlets don’t have dynamic parameters, but Get-ChildItem definitely does, so we want our proxy to support them as well.&amp;nbsp; Different providers can add dynamic parameters to Get-ChildItem, so the optimal solution is to, at runtime, ask the Get-ChildItem cmdlet what dynamic parameters it has.&amp;nbsp; We can do that this way:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #008080"&gt;[void]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$PSBoundParameters&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Remove&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #8b0000"&gt;'Attribute'&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #ff4500"&gt;$argList&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;@(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$psboundparameters&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;getenumerator&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;|&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;%&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8b0000"&gt;"-$($_.Key)"&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;;&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Value&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;

&lt;SPAN style="COLOR: #ff4500"&gt;$wrappedCmd&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;Get-Command&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;Get-ChildItem&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000080"&gt;-Type&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;Cmdlet&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000080"&gt;-ArgumentList&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$argList&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #ff4500"&gt;$providerParams&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;@(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$wrappedCmd&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Parameters&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;GetEnumerator&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;|&lt;/SPAN&gt;
                                                  &lt;SPAN style="COLOR: #0000ff"&gt;Where-Object&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Value&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;IsDynamic&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$providerParams&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Length&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-gt&lt;/SPAN&gt; &lt;SPAN style="COLOR: #800080"&gt;0&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;
    &lt;SPAN style="COLOR: #ff4500"&gt;$paramDictionary&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;new-object&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;Management.Automation.RuntimeDefinedParameterDictionary&lt;/SPAN&gt;
    &lt;SPAN style="COLOR: #00008b"&gt;foreach&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt; &lt;SPAN style="COLOR: #00008b"&gt;in&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$providerParams&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
    &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;
        &lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Value&lt;/SPAN&gt;
        &lt;SPAN style="COLOR: #ff4500"&gt;$dynParam1&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;new-object&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;Management.Automation.RuntimeDefinedParameter&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;`&lt;/SPAN&gt;
                                  &lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Name&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;ParameterType&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Attributes&lt;/SPAN&gt;
        &lt;SPAN style="COLOR: #ff4500"&gt;$paramDictionary&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Add&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Name&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$dynParam1&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;
    &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;
    &lt;SPAN style="COLOR: #00008b"&gt;return&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$paramDictionary&lt;/SPAN&gt;
&lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;&lt;/PRE&gt;
&lt;P&gt;This code generates an argument list from the automatic variable $PSBoundParameters.&amp;nbsp; $argList won’t necessarily look exactly like the arguments passed in as it will add the parameter names to positional arguments.&lt;/P&gt;
&lt;P&gt;Jason Shirk [MSFT]&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9473506" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Reserving keywords</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/12/reserving-keywords.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/12/reserving-keywords.aspx</id><published>2009-03-11T23:53:00Z</published><updated>2009-03-11T23:53:00Z</updated><content type="html">&lt;P&gt;A couple months ago we asked our MVPs how they felt about reserving keywords in V2.&amp;nbsp; We received some excellent but mixed feedback, so we’d like to open the discussion up a bit wider.&lt;/P&gt;
&lt;P&gt;There are keywords we hope to use in a future version of PowerShell, but won’t be implemented in V2.&amp;nbsp; “class”, “using”, and “new” are excellent candidates for additions to PowerShell, but we haven’t decided on the exact list yet.&lt;/P&gt;
&lt;P&gt;Because V1 did not reserve these keywords, reserving them now would be a breaking change.&amp;nbsp; For example, some people like to add an alias like:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #0000ff"&gt;New-Alias&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000080"&gt;-Name&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;new&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000080"&gt;-Value&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;New-Object&lt;/SPAN&gt;&lt;/PRE&gt;
&lt;P&gt;If we reserved “new”, scripts using this alias would be broken.&amp;nbsp; Similarly, in Bruce Payette’s book “Windows PowerShell In Action”, he describes a way to implement a keyword like “class”, though he uses “CustomClass” instead of “class”&lt;/P&gt;
&lt;P&gt;The biggest benefit of reserving in V2 is that we’ll break fewer scripts.&lt;/P&gt;
&lt;P&gt;The cons to reserving in V2 include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Breaking scripts needlessly.&amp;nbsp; We’ve tried to make V2 as backwards compatible as possible.&amp;nbsp; The breaking changes that we do have implement real functionality (for example, try/catch are new keywords, breaking scripts that used try or catch as a function.) &lt;/LI&gt;
&lt;LI&gt;Some keywords can be implemented in script, at least well enough to look like a real keyword. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Here’s an example of how you might implement the C# using statement in a V2 PowerShell script:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #00008b"&gt;function&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;using&lt;/SPAN&gt;             
&lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;             
    &lt;SPAN style="COLOR: #00008b"&gt;param&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$obj&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;,&lt;/SPAN&gt; &lt;SPAN style="COLOR: #008080"&gt;[scriptblock]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$sb&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;             
            
    &lt;SPAN style="COLOR: #00008b"&gt;try&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;             
        &lt;SPAN style="COLOR: #a9a9a9"&gt;&amp;amp;&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$sb&lt;/SPAN&gt;             
    &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt; &lt;SPAN style="COLOR: #00008b"&gt;finally&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;             
        &lt;SPAN style="COLOR: #00008b"&gt;if&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$obj&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;-is&lt;/SPAN&gt; &lt;SPAN style="COLOR: #008080"&gt;[IDisposable]&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;             
            &lt;SPAN style="COLOR: #ff4500"&gt;$obj&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;Dispose&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt;             
        &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;             
    &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;             
&lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;            &lt;/PRE&gt;
&lt;P&gt;And here is how you can use that function – it looks very similar to how a using keyword might look:&lt;/P&gt;&lt;PRE class=PowerShellColorizedScript&gt;&lt;SPAN style="COLOR: #0000ff"&gt;using&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$stream&lt;/SPAN&gt; &lt;SPAN style="COLOR: #a9a9a9"&gt;=&lt;/SPAN&gt; &lt;SPAN style="COLOR: #0000ff"&gt;new-object&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;System.IO.StreamReader&lt;/SPAN&gt; &lt;SPAN style="COLOR: #8a2be2"&gt;$PSHOME\types.ps1xml&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt;             
    &lt;SPAN style="COLOR: #00008b"&gt;foreach&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #ff4500"&gt;$_&lt;/SPAN&gt; &lt;SPAN style="COLOR: #00008b"&gt;in&lt;/SPAN&gt; &lt;SPAN style="COLOR: #800080"&gt;1&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;..&lt;/SPAN&gt;&lt;SPAN style="COLOR: #800080"&gt;5&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;{&lt;/SPAN&gt; &lt;SPAN style="COLOR: #ff4500"&gt;$stream&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a9a9a9"&gt;.&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;ReadLine&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;(&lt;/SPAN&gt;&lt;SPAN style="COLOR: #000000"&gt;)&lt;/SPAN&gt; &lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;             
&lt;SPAN style="COLOR: #000000"&gt;}&lt;/SPAN&gt;&lt;/PRE&gt;
&lt;P&gt;Feel free to give us your feedback in the comments – are you using any common language keywords as a function name in your scripts?&amp;nbsp; If you do, how bothersome would it be if you had to change your scripts?&lt;/P&gt;
&lt;P&gt;- Jason Shirk [MSFT]&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9471141" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Out-GridView Revisited</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/12/out-gridview-revisited.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/12/out-gridview-revisited.aspx</id><published>2009-03-11T23:10:34Z</published><updated>2009-03-11T23:10:34Z</updated><content type="html">&lt;p&gt;It has been more than one year since we updated &lt;a href="http://blogs.msdn.com/powershell/archive/2007/12/17/out-gridview.aspx"&gt;Out-GridView feature&lt;/a&gt; with you. In case you are not familiar with Out-GridView yet, it is a unique PowerShell cmdlet that users can pipe command output to a separate window, and it enables users organize and analyze output data easily. The previous blog entry by Brent gave an overview of Out-GridView cmdlet. &lt;/p&gt;  &lt;p&gt;So, what’s new for Out-GridView in Windows PowerShell CTP3? A major feature we added was query filtering functionality; data can be queried according to their properties through this feature. Let’s look at an example. Running command: “Get-ChildItem | Out-GridView”, an Out-GridView window populated with all the file/directory data in the current directory will pop up. Clicking “Query” and “Add” buttons on the Out-GridView window, we will see all the properties for file/directory info: “Mode”, “LastWriteTime”, and etc. Assume we are interested in finding files/ directories with names containing string “do”, select “Name”, type “do” in the query text box, then we will have returned results: “Documents” and “Downloads”. In addition to query operator “contains”,&amp;#160; we have more operators, such as “starts with”, “ends with”&amp;#160; for users to compose more varieties of queries.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/powershell/WindowsLiveWriter/OutGridViewRevisited_A872/image13.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://blogs.msdn.com/blogfiles/powershell/WindowsLiveWriter/OutGridViewRevisited_A872/image13_thumb.png" width="382" height="242" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;We also provided multiple ways to organize the layout of Out-GridView window. To select columns to display, you can use PowerShell cmdlet “Select-Object”. For example, “Get-ChildItem | Select-Object -Property Name,Length | Out-GridView” will only display “Name” and “Length” columns. The other way is through “Select Columns” UI. Click any column header, and click “Select Columns…”, then you can use the UI (shown below) to select the columns to be displayed. The columns in the “Selected columns” box will be displayed. With the&amp;#160; “Select Columns” UI, we can also use “move up/down” buttons to re-order the columns in the Out-GridView window. Alternatively, you can simply drag &amp;amp; drop a column to do re-ordering. &lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/powershell/WindowsLiveWriter/OutGridViewRevisited_A872/image_3.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://blogs.msdn.com/blogfiles/powershell/WindowsLiveWriter/OutGridViewRevisited_A872/image_thumb.png" width="392" height="139" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;To offer a better GUI user experience, Out-GridView window supports multiple row selection and copy/paste. For selecting consecutive rows, you can click starting row, and press Shift key, then click ending row. To select non consecutive rows, click a row, press Ctrl key, and then click more rows. If you’d like to save the data in in word processing software or spreadsheet, use the generic “Ctrl + C” to copy the rows selected, and “Ctrl + V” to paste them. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Xin Li&lt;/p&gt;  &lt;p&gt;Windows PowerShell Team&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9471103" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>How to Create an Object in PowerShell</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/11/how-to-create-an-object-in-powershell.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/11/how-to-create-an-object-in-powershell.aspx</id><published>2009-03-11T02:43:01Z</published><updated>2009-03-11T02:43:01Z</updated><content type="html">&lt;p&gt;Today someone in Xbox Live Operations (the folks that keep xBox Live alive and well) pinged me with a simple question about PowerShell with a complicated answer: &amp;#8220;How do I create a class in PowerShell?&amp;#8221;&lt;/p&gt;  &lt;p&gt;There&amp;#8217;s two scenarios I find where people want classes.&amp;#160; The first (and most common) is familiarity: the person wants to make a class in PowerShell because they think of problems in terms of classes.&amp;#160; The second is practical: the person wants to make a collection of properties and methods, because that&amp;#8217;s what the pipeline in PowerShell plays nicely with (for instance, you can Group, Sort, or Select easily on properties on an object, but not as easily on a hashtable).&lt;/p&gt;  &lt;p&gt;There are three ways you can do this with PowerShell V2 that I know of.&amp;#160; You can using Add-Type to compile C# or other .NET languages directly, and this is the only way you can make a real class definition in PowerShell V2.&amp;#160; You can also use New-Module with -asCustomObject to export the functions and variables within a dynamic module as a custom object, but you should be aware that complicated parameter sets do not work well as script methods.&amp;#160; Finally, you can do things the old V1 way, which is by tacking properties and methods onto an object with the Add-Member cmdlet.&amp;#160; Here's the same object, built in 3 different ways:&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;pre class="PowerShellColorizedScript"&gt;&lt;span style="color: #006400"&gt;# You can compile a class with C# or other .NET languages in PowerShell v2&lt;/span&gt;            
&lt;span style="color: #0000ff"&gt;Add-Type&lt;/span&gt; &lt;span style="color: #8b0000"&gt;@'
public class MyObject
{
    public int MyField = 5;    
    public int xTimesMyField(int x) {
        return x * MyField;
    }
}
'@&lt;/span&gt;            
            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt; &lt;span style="color: #0000ff"&gt;New-Object&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;MyObject&lt;/span&gt;            
            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;XTimesMyField&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #800080"&gt;10&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            
            
&lt;span style="color: #006400"&gt;# You can also use -asCustomObject with the New-Module cmdlet to export a module as a class&lt;/span&gt;            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt; &lt;span style="color: #0000ff"&gt;New-Module&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
    &lt;span style="color: #008080"&gt;[int]&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$myField&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt; &lt;span style="color: #800080"&gt;5&lt;/span&gt;            
    &lt;span style="color: #00008b"&gt;function&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;XTimesMyField&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$x&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
        &lt;span style="color: #ff4500"&gt;$x&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;*&lt;/span&gt; &lt;span style="color: #ff4500"&gt;$myField&lt;/span&gt;            
    &lt;span style="color: #000000"&gt;}&lt;/span&gt;            
    &lt;span style="color: #0000ff"&gt;Export-ModuleMember&lt;/span&gt; &lt;span style="color: #000080"&gt;-Variable&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;*&lt;/span&gt; &lt;span style="color: #000080"&gt;-Function&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;*&lt;/span&gt;                
&lt;span style="color: #000000"&gt;}&lt;/span&gt; &lt;span style="color: #000080"&gt;-asCustomObject&lt;/span&gt;            
            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;xTimesMyField&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #800080"&gt;10&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            
            
&lt;span style="color: #006400"&gt;# You can also simply declare an object and start tacking on properties and methods with the&lt;/span&gt;            
&lt;span style="color: #006400"&gt;# Add-Member cmdlet.  If you use -passThru you can make one giant pipeline that adds all of the&lt;/span&gt;            
&lt;span style="color: #006400"&gt;# members and assign it to a variable&lt;/span&gt;            
            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;=&lt;/span&gt; &lt;span style="color: #0000ff"&gt;New-Object&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;Object&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;|&lt;/span&gt;            
    &lt;span style="color: #0000ff"&gt;Add-Member&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;NoteProperty&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;MyField&lt;/span&gt; &lt;span style="color: #800080"&gt;5&lt;/span&gt; &lt;span style="color: #000080"&gt;-PassThru&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;|&lt;/span&gt;             
    &lt;span style="color: #0000ff"&gt;Add-Member&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;ScriptMethod&lt;/span&gt; &lt;span style="color: #8a2be2"&gt;xTimesMyField&lt;/span&gt; &lt;span style="color: #000000"&gt;{&lt;/span&gt;            
        &lt;span style="color: #00008b"&gt;param&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #ff4500"&gt;$x&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            
        &lt;span style="color: #ff4500"&gt;$x&lt;/span&gt; &lt;span style="color: #a9a9a9"&gt;*&lt;/span&gt; &lt;span style="color: #ff4500"&gt;$this&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;MyField&lt;/span&gt;            
        &lt;span style="color: #000000"&gt;}&lt;/span&gt; &lt;span style="color: #000080"&gt;-PassThru&lt;/span&gt;            
                
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;            
&lt;span style="color: #ff4500"&gt;$object&lt;/span&gt;&lt;span style="color: #a9a9a9"&gt;.&lt;/span&gt;&lt;span style="color: #000000"&gt;xTimesMyField&lt;/span&gt;&lt;span style="color: #000000"&gt;(&lt;/span&gt;&lt;span style="color: #800080"&gt;10&lt;/span&gt;&lt;span style="color: #000000"&gt;)&lt;/span&gt;            &lt;/pre&gt;

&lt;p&gt;Hope this Helps &lt;/p&gt;

&lt;p&gt;James Brundage [MSFT] &lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9470009" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author><category term="CTP3" scheme="http://blogs.msdn.com/powershell/archive/tags/CTP3/default.aspx" /><category term="HowTo" scheme="http://blogs.msdn.com/powershell/archive/tags/HowTo/default.aspx" /></entry><entry><title>Free PowerShell EBook</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/09/free-powershell-ebook.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/09/free-powershell-ebook.aspx</id><published>2009-03-09T03:00:27Z</published><updated>2009-03-09T03:00:27Z</updated><content type="html">&lt;p&gt;PowerShell MVP and prodigious PowerShell blogger &lt;a href="http://keithhill.spaces.live.com/default.aspx"&gt;Keith Hill&lt;/a&gt; has converted his very popular Effective PowerShell blog series into a FREE Ebook.&amp;#160; You can download it &lt;a href="http://keithhill.spaces.live.com/blog/cns!5A8D2641E0963A97!6930.entry"&gt;HERE&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Here is a taste of you'll you'll get:&lt;/p&gt;  &lt;p&gt;&lt;font size="2" face="cal"&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;      &lt;br /&gt;&lt;/font&gt;&lt;font size="2" face="cal"&gt;Introduction ...............................................................................................................................................................1     &lt;br /&gt;Item 1: Four Cmdlets that are the Keys to Discovery within PowerShell ..................................................................1      &lt;br /&gt;Key #1: Get-Command ..........................................................................................................................................1      &lt;br /&gt;Key #2: Get-Help ...................................................................................................................................................2      &lt;br /&gt;Key #3: Get-Member ............................................................................................................................................5      &lt;br /&gt;Key #4: Get-PSDrive ..............................................................................................................................................6      &lt;br /&gt;PowerShell 2.0 Update ..........................................................................................................................................7      &lt;br /&gt;Item 2: Understanding Output .................................................................................................................................8      &lt;br /&gt;Output is Always a .NET Object ..............................................................................................................................8      &lt;br /&gt;Function Output Consists of Everything That Isn't Captured .................................................................................9      &lt;br /&gt;Other Types of Output That Can't Be Captured .................................................................................................. 11      &lt;br /&gt;Item 3: Know What Objects Are Flowing Down the Pipeline ................................................................................. 12      &lt;br /&gt;Item 4: Output Cardinality - Scalars, Collections and Empty Sets - Oh My! ........................................................... 15      &lt;br /&gt;Working with Scalars .......................................................................................................................................... 15      &lt;br /&gt;Working with Collections ................................................................................................................................... 16      &lt;br /&gt;Working with Empty Sets ................................................................................................................................... 17      &lt;br /&gt;Item 5: Use the Objects, Luke. Use the Objects! ................................................................................................... 19      &lt;br /&gt;Item 6: Know Your Output Formatters ................................................................................................................... 22      &lt;br /&gt;Item 7: Understanding PowerShell Parsing Modes ................................................................................................ 31      &lt;br /&gt;Item 8: Understanding ByPropertyName Pipeline Bound Parameters .................................................................. 35      &lt;br /&gt;Item 9: Understanding ByValue Pipeline Bound Parameters ................................................................................. 38      &lt;br /&gt;Item 10: Regular Expressions - One of the Power Tools in PowerShell ................................................................. 42      &lt;br /&gt;PowerShell 2.0 Update ....................................................................................................................................... 43      &lt;br /&gt;Item 11: Comparing Arrays .................................................................................................................................... 43      &lt;br /&gt;Item 12: Use Set-PSDebug -Strict In Your Scripts - Religiously ............................................................................... 45      &lt;br /&gt;PowerShell 2.0 Update ....................................................................................................................................... 47      &lt;br /&gt;Item 13: Commenting Out Lines in a Script File ..................................................................................................... 47      &lt;br /&gt;PowerShell 2.0 Update ....................................................................................................................................... 48&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Experiment! Enjoy! Engage! &lt;/p&gt;  &lt;p&gt;Jeffrey Snover [MSFT]   &lt;br /&gt;Windows Management Partner Architect    &lt;br /&gt;Visit the Windows PowerShell Team blog at:&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/a&gt;    &lt;br /&gt;Visit the Windows PowerShell ScriptCenter at:&amp;#160; &lt;a href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/a&gt;&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9467129" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>2009 MVP Summit</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/02/2009-mvp-summit.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/02/2009-mvp-summit.aspx</id><published>2009-03-02T13:28:43Z</published><updated>2009-03-02T13:28:43Z</updated><content type="html">&lt;p&gt;The MVP summit started yesterday and we meet with our MVPs today.&amp;#160; This is one of my favorite events of the year.&amp;#160; MVPs are people in the community that are very active (and helpful [yes - they look at both :-)] ) in a particular technology community.&amp;#160; We get them all together each year and have a good exchange of ideas.&amp;#160; We tell them what we are doing and where we are going and they give us great feedback.&amp;#160;&amp;#160; MVPS are in invaluable source of real-world feedback on our technology.&amp;#160;&amp;#160; &lt;/p&gt;  &lt;p&gt;I'm really excited this year because I'm co-presenting a sort of &amp;quot;State of PowerShell&amp;quot; talk with Kenneth Hansen.&amp;#160; Ken took the lead on the deck and I'm really excited by the approach he took.&amp;#160; There are a number of &amp;quot;big picture&amp;quot; things that Ken and I have discussed that we don't think other people see and we've trying to figure out how to communicate these.&amp;#160; I reviewed the deck with Ken on Friday and I think he has done a great job presenting those ideas.&amp;#160; It is one of those &amp;quot;behind the scenes&amp;quot; talks where we discuss what the problem is, our approach, where we are and were we are going.&amp;#160; Hopefully this is one of those talks where people walk away saying, &amp;quot;NOW I understand why you did that&amp;quot;.&lt;/p&gt;  &lt;p&gt;MVPs are great because they'll tell you if you are being incoherent or obvious.&amp;#160; An &lt;strong&gt;&lt;em&gt;honest mirror&lt;/em&gt;&lt;/strong&gt; is both difficult to find and extremely valuable.&amp;#160; We'll find out today as we give the talk at 9.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Experiment! Enjoy! Engage! &lt;/p&gt;  &lt;p&gt;Jeffrey Snover [MSFT]   &lt;br /&gt;Windows Management Partner Architect    &lt;br /&gt;Visit the Windows PowerShell Team blog at:&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/a&gt;    &lt;br /&gt;Visit the Windows PowerShell ScriptCenter at:&amp;#160; &lt;a href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/a&gt;&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9454314" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>PowerShell Folksonomy - Are You In?</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/01/powershell-folksonomy.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/01/powershell-folksonomy.aspx</id><published>2009-03-01T18:14:00Z</published><updated>2009-03-01T18:14:00Z</updated><content type="html">&lt;P&gt;A while ago I did some experimentation with a PowerShell &lt;A href="http://en.wikipedia.org/wiki/Folksonomy" mce_href="http://en.wikipedia.org/wiki/Folksonomy"&gt;folksonomy&lt;/A&gt;.&amp;nbsp; The idea was to tag internet content (blogs, comments, newsgroup replies, etc) with unique tags that search engines would pick up and make it easier to find exactly the information you needed.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;This effort stemmed from an documentation battle we had over the use of the term &lt;STRONG&gt;cmdlet&lt;/STRONG&gt;.&amp;nbsp; This was a word that I made up to describe PowerShell commands but I wanted to invoke the idea that these were tiny things that were composed with other tiny things to solve big problems.&amp;nbsp; One of reasons I was hardcore on this idea of a cmdlet being "tiny" is that I knew that development teams would baulk at the "tax" of having to write "commands".&amp;nbsp;&amp;nbsp; I wanted to be able to start the entire discussion with the premise that we were asking them for a very tiny amount of work.&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;Let me correct the record on this one.&amp;nbsp; Jim Truher just reminded me that I was pushing the term Functional Units (FUs) [can you detect my wiseass streak?] and that it was he that came up with the term "cmdlet".&amp;nbsp; FUs remind me of a funny Dave Cutler story I once heard.&amp;nbsp; No wait - I can't tell THAT story on a blog - never mind.&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;The documentation perspective was that we shouldn't invent new words when there where perfectly good alternatives ("command").&amp;nbsp; We had a&amp;nbsp; number of back and forth's on the subject but what was a decisive datapoint was what happened when you typed the terms into search engines.&amp;nbsp; &lt;/P&gt;
&lt;TABLE border=3 cellSpacing=0 cellPadding=2 width=400&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD vAlign=top width=130&gt;Search Term&lt;/TD&gt;
&lt;TD vAlign=top width=132&gt;Live Search&lt;/TD&gt;
&lt;TD vAlign=top width=132&gt;Google&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD vAlign=top width=130&gt;Command&lt;/TD&gt;
&lt;TD vAlign=top width=132&gt;102,000,000&lt;/TD&gt;
&lt;TD vAlign=top width=132&gt;200,000,000&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD vAlign=top width=130&gt;Cmdlet&lt;/TD&gt;
&lt;TD vAlign=top width=133&gt;29,600&lt;/TD&gt;
&lt;TD vAlign=top width=133&gt;107,000&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD vAlign=top width=130&gt;Ratio &lt;/TD&gt;
&lt;TD vAlign=top width=133&gt;3446x&lt;/TD&gt;
&lt;TD vAlign=top width=133&gt;1869x&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;By using the term "cmdlet", we improved the signal-to-noise ratio of the search engines and provided our customers a dramatically better experience.&lt;/P&gt;
&lt;P&gt;I got to thinking about that and wondered if we couldn't do even better by adopting a unique tag PSMDTAG&amp;nbsp; (PowerShell MetaData TAG) and convention for using it so that people could use that tag to better find exactly what they were looking for.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;For a while I was peppering all my content with this tag and experimenting with various extension tags and then would see how the search engines did with it.&amp;nbsp; At some point I got distracted and stopped doing it but someone recently mentioned it again so I started to do some experimentations and I think it is an idea with picking up again. That said, &lt;STRONG&gt;&lt;FONT color=#ff0000&gt;to be successful, it requires the entire community to participate so I'd like to see if this is something you all would be interested in participating in&lt;/FONT&gt;&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Let's start out simple - go to your favorite search engine and type PSMDTAG:FAQ&amp;nbsp; and look at the search results.&amp;nbsp; (You won't find a ton because I only did this for a while.)&amp;nbsp; Notice that the results typically give you most of the FAQ question.&amp;nbsp; Then try some things like:&lt;/P&gt;psmdtag:faq prompt &lt;BR&gt;psmdtag:faq delegate &lt;BR&gt;psmdtag:faq wmi method &lt;BR&gt;psmdtag:faq base64 
&lt;P&gt;Again - you can't go crazy because I only tagged so many things.&amp;nbsp; The questions to you are:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Is this useful? &lt;/LI&gt;
&lt;LI&gt;Is it useful enough for you to participate by tagging your own content or add tags to the comments of other people's content? 
&lt;OL&gt;
&lt;LI&gt;Check &lt;A href="http://mshforfun.blogspot.com/2006/05/perfect-prompt-for-windows-powershell.html" mce_href="http://mshforfun.blogspot.com/2006/05/perfect-prompt-for-windows-powershell.html"&gt;THIS&lt;/A&gt; out.&amp;nbsp; I used the comments to tag someone else's content. &lt;/LI&gt;&lt;/OL&gt;&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;PSMDTAG:FAQ What is a PSMDTAG? &lt;BR&gt;PSMDTAG:FAQ&amp;nbsp; Will PowerShell have its own folksonomy?&lt;/P&gt;
&lt;P&gt;Experiment! Enjoy! Engage! &lt;/P&gt;
&lt;P&gt;Jeffrey Snover [MSFT] &lt;BR&gt;Windows Management Partner Architect &lt;BR&gt;Visit the Windows PowerShell Team blog at:&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;A href="http://blogs.msdn.com/PowerShell" mce_href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/A&gt; &lt;BR&gt;Visit the Windows PowerShell ScriptCenter at:&amp;nbsp; &lt;A href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx" mce_href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/A&gt;&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9452857" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Where Did That Come From?</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/03/01/where-did-that-come-from.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/03/01/where-did-that-come-from.aspx</id><published>2009-03-01T17:37:04Z</published><updated>2009-03-01T17:37:04Z</updated><content type="html">&lt;p&gt;Have you ever found yourself asking the question, &amp;quot;where did THAT come from?&amp;quot;?&lt;/p&gt;  &lt;p&gt;In PowerShell we try to give you mechanisms you can use to answer questions like that.&amp;#160;&amp;#160;&amp;#160; We spend extra resources (memory, cpu cycles, etc) to do this because we focus in the performance of the PEOPLE using our software instead of the performance of the code.&amp;#160; When something goes pear-shaped, what matters is how quickly a person can figure out what is going on and fix it.&amp;#160; &lt;/p&gt;  &lt;p&gt;We've talked quite&amp;#160; bit about this in the context of the rich error information we gather but in this blog I'm going to discuss another V1 feature and then tell you about ANOTHER one of my favorite V2isms.&amp;#160; &lt;/p&gt;  &lt;p&gt;You know that variables are exposed as a drive and you can do things like:&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;PS&amp;gt; dir Variable:s* &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;Name&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Value     &lt;br /&gt;----&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; -----      &lt;br /&gt;ShellId&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Microsoft.PowerShell&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Bug have you have tried this:&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;PS&amp;gt; dir Variable:s* |ft Name,&lt;strong&gt;&lt;font color="#ff0000"&gt;Description&lt;/font&gt;&lt;/strong&gt; -auto &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;Name&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Description     &lt;br /&gt;----&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; -----------      &lt;br /&gt;ShellId&amp;#160;&amp;#160;&amp;#160; The ShellID identifies the current shell.&amp;#160; This is used by #Requires.      &lt;br /&gt;StackTrace&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Did you know about that?&amp;#160; There is a lot more to variables than meets the eye!&amp;#160; You can provide a description with a variable by using Set-Variable&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;PS&amp;gt; Set-Variable X 15 -Description &amp;quot;This is a test&amp;quot;     &lt;br /&gt;PS&amp;gt; Get-Variable x |fl * &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;Name&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; : x     &lt;br /&gt;Description : This is a test      &lt;br /&gt;Value&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; : 15      &lt;br /&gt;Visibility&amp;#160; : Public      &lt;br /&gt;Module&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; :      &lt;br /&gt;ModuleName&amp;#160; :      &lt;br /&gt;Options&amp;#160;&amp;#160;&amp;#160;&amp;#160; : None      &lt;br /&gt;Attributes&amp;#160; : {}&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;That has existed since PowerShell V1 but what we never were able to answer is - where did that &lt;strong&gt;function&lt;/strong&gt; come from?&amp;#160; &lt;/p&gt;  &lt;p&gt;When I start PowerShell, I dot-source a number of scripts which define functions as part of my session.&amp;#160; Occasionally, I'll decide that I want a function to do something different.&amp;#160; But then the question is, what file was the function defined in?&amp;#160; There was never a good way to answer that question.&amp;#160; That all changes in PowerShell V2.&lt;/p&gt;  &lt;p&gt;In V2, we have extended the SCRIPTBLOCK object to include the FILE where the script was defined.&amp;#160; One of the tricks you need to learn is that to get all the information about a Scriptblock, you need to use the -FORCE flag on the formatting commands.&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;[4376:0]PS&amp;gt; (dir function:prompt ).scriptblock |fl * &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;&amp;#160;&amp;#160;&amp;#160; if ($PSDebugContext)     &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; { &amp;quot;DBG&amp;gt;&amp;quot;      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; }      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; else      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; {      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;quot;[{0}:{1}]PS&amp;gt; &amp;quot; -f $PID, $NestedPromptLevel      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; } &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;[4376:0]PS&amp;gt; (dir function:prompt ).scriptblock |fl * &lt;strong&gt;&lt;font color="#ff0000"&gt;-force&lt;/font&gt;&lt;/strong&gt; &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;IsFilter&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; : False     &lt;br /&gt;StartPosition : System.Management.Automation.PSToken      &lt;br /&gt;&lt;strong&gt;&lt;font color="#ff0000"&gt;File&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; : D:\ps\profile.ps1         &lt;br /&gt;&lt;/font&gt;&lt;/strong&gt;Attributes&amp;#160;&amp;#160;&amp;#160; : {}      &lt;br /&gt;Module&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; :&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;Now that you know it is there, you can just access it directly:&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;[4376:0]PS&amp;gt; (dir function:prompt ).scriptblock.file     &lt;br /&gt;D:\ps\profile.ps1&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font color="#0000ff" size="2" face="Courier New"&gt;&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;PSMDTAG:FAQ: How do I tell where a function was defined?   &lt;br /&gt;(dir function:X).ScriptBlock.File&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Experiment! Enjoy! Engage! &lt;/p&gt;  &lt;p&gt;Jeffrey Snover [MSFT]   &lt;br /&gt;Windows Management Partner Architect    &lt;br /&gt;Visit the Windows PowerShell Team blog at:&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/a&gt;    &lt;br /&gt;Visit the Windows PowerShell ScriptCenter at:&amp;#160; &lt;a href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/a&gt;&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9452823" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Converting to Array</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/02/27/converting-to-array.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/02/27/converting-to-array.aspx</id><published>2009-02-27T21:25:00Z</published><updated>2009-02-27T21:25:00Z</updated><content type="html">&lt;P&gt;When you run a PowerShell pipeline, that pipeline might return&amp;nbsp;0, 1 or many items.&amp;nbsp; If you are assigning the results of that pipeline to a variable, you will get $null, 1 item or an array of items respectively.&amp;nbsp; Sometimes, you won't care about the different types returned, but at other times, you'll actually prefer to force the results to always be an array.&amp;nbsp; In those cases, you can use @( ... ).&amp;nbsp; As in:&lt;/P&gt;
&lt;P&gt;$a = @(get-childitem)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;That will evaluate the statements enclosed within the parentheses and collect the results into an array.&amp;nbsp; If there are no results, then you'll get an array of length zero.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;This usually works well enough, but I found that I usually decide that I want an array after I'm well into writing&amp;nbsp;the pipeline.&amp;nbsp; I would then have to move the cursor back to the beginning of the pipeline, to insert the "@(".&amp;nbsp; After repeating that enough times I got annoyed and decided I'd rather just append something at the end of the pipeline that would convert the results to an array.&amp;nbsp; Thus was born my ToArray function.&lt;/P&gt;
&lt;P&gt;function ToArray&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; begin&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $output = @(); &lt;BR&gt;&amp;nbsp; }&lt;BR&gt;&amp;nbsp; process&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $output += $_; &lt;BR&gt;&amp;nbsp; }&lt;BR&gt;&amp;nbsp; end&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ,$output; &lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;Simple enough right?&amp;nbsp; The begin block creates a new empty array.&amp;nbsp; The process block, which gets called for every pipeline item, adds that item to the array, and the end block just puts the array into an array of length 1 and writes that array to the pipeline.&amp;nbsp; I need to wrap the $output array in a 1 element array because the pipeline will unravel all&amp;nbsp;enumerables (well, almost all).&amp;nbsp; This way it just unravels that 1 element array and what's left is my original array.&lt;/P&gt;
&lt;P&gt;One thing you should know is that this isn't exactly the most performant way to do this.&amp;nbsp;&amp;nbsp;For every item I'm&amp;nbsp;creating a brand new array.&amp;nbsp;&amp;nbsp;If I was going to pipe a lot of items I&amp;nbsp;would probably be better off using an ArrayList and converting it to an array at the end.&amp;nbsp; I'll&amp;nbsp;leave that part as an exercise for you.&lt;/P&gt;
&lt;P&gt;This works for me.&amp;nbsp; It's simple and it makes my life easier.&amp;nbsp; Now whenever I need to make the results into an array I just pipe into ToArray.&amp;nbsp; No more having to to go back to the beginning of the pipeline for me. :-)&lt;/P&gt;
&lt;P&gt;$a = get-childitem | ToArray&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;- Marcel Ortiz Soto [MSFT]&lt;/SPAN&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;P.S. if ToArray is too long for you, create an alias.&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9449900" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>Stopping Every Instance of PowerShell.exe (except the one I'm in)</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/02/12/stopping-every-instance-of-powershell-exe-except-the-one-i-m-in.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/02/12/stopping-every-instance-of-powershell-exe-except-the-one-i-m-in.aspx</id><published>2009-02-12T02:17:41Z</published><updated>2009-02-12T02:17:41Z</updated><content type="html">&lt;p&gt;Our Test Architect just dropped by my office and pitched me a PowerShell question with a nice, quick answer.&lt;/p&gt;  &lt;p&gt;He wanted to stop every process of a particular name, except for the instance that was running the script.&lt;/p&gt;  &lt;p&gt;You can do this in one nice pipeline:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;em&gt;Get-Process Powershell&amp;#160; | Where-Object { $_.ID -ne $pid } | Stop-Process&lt;/em&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Get-Process takes a positional parameter (name), which is a wildcard that supplies the name of the process.&amp;#160; It returns back a bunch of ProcessInfo objects, which have a property, ID (the process ID).&amp;#160; $pid is a variable that will tell you the current process ID in PowerShell.&amp;#160; Where-Object { $_.ID -ne $pid } simply returns every instance that isn't the current instance.&amp;#160; Stop-Process takes ProcessInfo from objects, and will stop the processes that were piped into it (which is now every instance of PowerShell except the one I'm in).&lt;/p&gt;  &lt;p&gt;Another day, another PowerShell question answered.&lt;/p&gt;  &lt;p&gt;Hope this Helps,&lt;/p&gt;  &lt;p&gt;James Brundage [MSFT]&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9413908" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry><entry><title>JAOO Talk</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/02/10/jaoo-talk.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/02/10/jaoo-talk.aspx</id><published>2009-02-10T13:51:14Z</published><updated>2009-02-10T13:51:14Z</updated><content type="html">&lt;p&gt;Last year I was delighted to be invited to give a talk at JAOO conference.&amp;#160; This is a great language conference.&amp;#160; The thing I was delighted to discover is that the while it had Microsoft content (AndersH gave one of the keynotes), the bulk of the people and content was non-Microsoft.&amp;#160; This allowed me to give a different kind of a talk.&amp;#160; It allowed me to go back to the basics and explain what were were doing and why we were doing it to a group of people that didn't necessarily have any background and were potentially not particularly friendly towards Microsoft.&amp;#160; (I've got a funny story about that - ask me in person sometime.)&lt;/p&gt;  &lt;p&gt;I hope you enjoy the talk &lt;a href="http://blog.jaoo.dk/2009/02/09/windows-powershell-a-command-line-shell-and-scripting-language/"&gt;HERE&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Experiment! Enjoy! Engage! &lt;/p&gt;  &lt;p&gt;Jeffrey Snover [MSFT]   &lt;br /&gt;Windows Management Partner Architect    &lt;br /&gt;Visit the Windows PowerShell Team blog at:&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blogs.msdn.com/PowerShell"&gt;http://blogs.msdn.com/PowerShell&lt;/a&gt;    &lt;br /&gt;Visit the Windows PowerShell ScriptCenter at:&amp;#160; &lt;a href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx"&gt;http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx&lt;/a&gt;&lt;/p&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9410570" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author><category term="Video" scheme="http://blogs.msdn.com/powershell/archive/tags/Video/default.aspx" /></entry><entry><title>#requires your scripts</title><link rel="alternate" type="text/html" href="http://blogs.msdn.com/powershell/archive/2009/02/06/requires-your-scripts.aspx" /><id>http://blogs.msdn.com/powershell/archive/2009/02/06/requires-your-scripts.aspx</id><published>2009-02-06T19:36:00Z</published><updated>2009-02-06T19:36:00Z</updated><content type="html">&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;Recently, I saw someone that had developed a script on&amp;nbsp;the CTP3 drop&amp;nbsp;and was then having trouble running it on v1 of PowerShell.&amp;nbsp; Eventually it turned out that he was using v2 features in his script.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;Most of you know that we are trying to keep the next version of PowerShell compatible with v1 and I encourage you to report any problems that you might have in that area.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;Unfortunately, v2 being compatible with v1, doesn’t mean v1 is compatible with v2. &lt;?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;After seeing that, I&amp;nbsp;started thinking about people sharing v2 scripts on the web and the problems they might cause someone that didn’t realize the script was supposed to be run on v2.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;If you are sharing your v2 scripts (and I hope you are), then I wanted to say two things.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;Firstly, thanks!&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;Sharing scripts helps the&amp;nbsp;community&amp;nbsp;tremendously.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;Secondly, if they are meant to be run only on v2, be sure to annotate them so people don’t get into trouble trying to run them on v1.&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;There are many ways you could annotate your scripts so people know what version they are supposed to be run on, but PowerShell already has a way to do it.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;It’s called #requires.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;You can read all about it &lt;A href="http://technet.microsoft.com/en-us/library/dd315380.aspx" mce_href="http://technet.microsoft.com/en-us/library/dd315380.aspx"&gt;here&lt;/A&gt; or &lt;A href="http://powershellers.blogspot.com/2008/06/requires-statement.html" mce_href="http://powershellers.blogspot.com/2008/06/requires-statement.html"&gt;here&lt;/A&gt;.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;I’m sure there are other places too, those are just the first ones I found.&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;In the majority of cases, all it will amount to is putting “#requires –version 2“&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;at the top of your script.&lt;SPAN style="mso-spacerun: yes"&gt;&amp;nbsp; &lt;/SPAN&gt;For example, here’s my awesome script that will only run on v2.&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;#requires -version 2&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;write-host "Can only run on v2."&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;And here are the results on v2, followed by v1:&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;B style="mso-bidi-font-weight: normal"&gt;&lt;SPAN style="FONT-SIZE: 10pt; COLOR: #00b050; FONT-FAMILY: 'Courier New'"&gt;# V2&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;PS&amp;gt;.\foo.ps1&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;Can only run on v2.&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;B style="mso-bidi-font-weight: normal"&gt;&lt;SPAN style="FONT-SIZE: 10pt; COLOR: #00b050; FONT-FAMILY: 'Courier New'"&gt;# V1&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;PS &amp;gt; .\foo.ps1&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;The script 'foo.ps1' cannot be run because it contained a "#requires" statement at line 1 for Windows PowerShell versi&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;on 2.0 which is incompatible with the installed Windows PowerShell version of 1.0.&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;At line:1 char:10&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;+ .\foo.ps1 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;PS &amp;gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;&lt;o:p&gt;&amp;nbsp;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;&lt;o:p&gt;&amp;nbsp;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;&lt;SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Arial','sans-serif'"&gt;- Marcel Ortiz Soto [MSFT]&lt;/SPAN&gt;&lt;SPAN style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9402822" width="1" height="1"&gt;</content><author><name>PowerShellTeam</name><uri>http://blogs.msdn.com/members/PowerShellTeam.aspx</uri></author></entry></feed>